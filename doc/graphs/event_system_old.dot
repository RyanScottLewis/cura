digraph event_system {
  fontsize=12;
  fontname=Helvetica;
  ranksep=0.3;
  size="10,10";
  rankdir=TB;

  node[fontsize=10, fontname=Helvetica, shape=box];
  edge[fontsize=10, fontname=Helvetica, arrowsize=0.6];

  poll [label="Poll for user input events"];
  middleware [label="Send events through middleware to fill dispatch queue"];
  dispatch [label="Dispatch events in dispatch queue"];

  poll
  -> middleware
  -> dispatch
  -> "Update the view tree"
  -> "Render the view tree"
  -> poll;

  ////////////////////////////////////////////////////////////////////////////////////
  // Middleware                                                                     //
  ////////////////////////////////////////////////////////////////////////////////////

  {
    rank=same;

    middleware_dispatch_aiming [label="Aiming"];
    middleware_dispatch_translation [label="Translation\nCreate events based on context and add to dispatch queue"];

    middleware
    -> middleware_dispatch_aiming
    -> "Dispatch\nAdd event to dispatch queue"
    -> middleware_dispatch_translation
  }

  ////////////////////////////////////////////////////////////////////////////////////
  // Propagation                                                                     //
  ////////////////////////////////////////////////////////////////////////////////////

  phase_join [shape=point];
  dispatch -> phase_join [label="Each event", style="dashed"];

  // Bubbling Phase
  bubbling_handle [label="Handle by event handler"];
  bubbling_callbacks [label="Run all callbacks matching name in the order they were defined"];
  bubbling_propagate [label="Propagate up to parent's event handler"];

  bubbling_handle
  -> bubbling_callbacks
  -> bubbling_propagate;

  bubbling_propagate -> bubbling_callbacks [label="If has parent"];

  // Capturing Phase
  capturing_handle [label="Handle by event handler"];
  capturing_callbacks [label="Run all callbacks matching name in the order they were defined"];
  capturing_propagate [label="Propagate down to target's ancestor's event handler"];

  capturing_handle
  -> capturing_callbacks
  -> capturing_propagate;

  capturing_propagate -> capturing_callbacks [label="If not target"];
  capturing_propagate -> capturing_callbacks [label="If is target"];

  { rank=same; dispatch; phase_join; }

  // "Each event" join
  phase_join -> bubbling_handle [dir=none, label="Bubbling Phase: First target "];
  phase_join -> capturing_handle [dir=none, label="TODO: Capturing Phase", style="dotted"];
}
